#!/usr/bin/python

#
#	(C) 2013 Varun Mittal <varunmittal91@gmail.com>
#	NeweraHPC program is distributed under the terms of the GNU General Public License v3
#
#	This file is part of NeweraHPC.
#
#	NeweraHPC is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation version 3 of the License.
#
#	NeweraHPC is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with NeweraHPC.  If not, see <http://www.gnu.org/licenses/>.
#

import os
import sys
import errno
import getopt
import random
import ConfigParser

cloudROOT = "/var/lib/neweraPaaS/"
lxcROOT   = "/var/lib/lxc/"

def main(argv):
   
   image    = ''
   cmd      = ''
   instance = ''

   try:
      opts, args = getopt.getopt(argv, "hi:c:n:", ["ifile=", "icmd=", "icn="])
   except getopt.GetoptError:
      print "neweraPaaS.py -i <image name>"
      sys.exit(2)
   
   for opt, arg in opts:
      if opt in ('-i'):
         image = arg
      elif opt in ('-c'):
         cmd = arg
      elif opt in ('-n'):
         instance = arg
 
   if not cmd:
      print "No command given"
      sys.exit(2)
   elif cmd in ('create'):
      createContainer(image)
      sys.exit(2)
   elif cmd in ('start'):
      print "Starting a cotainer"
      startContainer(instance)
      sys.exit(2)
   elif cmd in ('stop'):
      print "Stoping a conatiner"
      stopContainer(instance)
      sys.exit(0)
   elif cmd in ('freeze-image'):
      print "Freezing image"
      freezeImage(instance)
      sys.exit(0)

   print "Instance " + instancePath[0] + " created"

def freezeImage(instance):
   if not instance:
      print "No instance name given"
      sys.exit(2)
   
   image = checkPaaSInstance(instance)
   if not image:
      sys.exit(2)

   imagePath    = cloudROOT + "images/" + image
   newImagePath = cloudROOT + "images/images-" + instance
   
   os.system("mkdir " + newImagePath)
   os.system("cp " + imagePath + "/config " + newImagePath + "/config")
   os.system("cp " + imagePath + "/fstab "  + newImagePath + "/fstab") 
   os.system("cp -r " + lxcROOT + instance + "/rootfs " + newImagePath + "/rootfs")

   print imagePath
   print newImagePath
   sys.exit(0)

def configureContainer(image, instance):
   ipaddr         = "10.0.3." + instance[9:]
   lxcRootPath    = lxcROOT + instance + "/rootfs"  
   lxcFstabPath   = lxcROOT + instance + "/fstab"
   configPath     = lxcROOT + instance + "/config"
   hostnamePath   = lxcROOT + instance + "/rootfs/etc/hostname"
   PaaSconfigPath = lxcROOT + instance + "/neweraPaaS.config"

   print "Configuring:" + configPath
   print "Ipaddress:" + ipaddr

   config = ConfigParser.RawConfigParser()
   config.add_section('InstanceDetails')
   config.set("InstanceDetails", "base-image", image)
   with open(PaaSconfigPath, 'wb') as configfile:
      config.write(configfile)

   file = open(configPath, 'a');
   file.write("lxc.network.hwaddr = " + randomMAC() + "\n")
   file.write("lxc.utsname = " + instance + "\n")
   file.write("lxc.network.ipv4 = " + ipaddr + "\n")
   file.write("lxc.rootfs = " + lxcRootPath + "\n")
   file.write("lxc.mount = " + lxcFstabPath + "\n")
   file.close()

   file = open(hostnamePath, 'w+')
   file.write(instance)
   file.close()

def createContainer(image):
   print "Creating a container"
   if not image:
      print "No image name given"
      sys.exit(2)

   if not checkImage(image):
      print "Image " + image + " not found"
      sys.exit(2)

   instance = createInstanceData()
   mountContainer(image, instance)
   configureContainer(image, instance)
   os.system("lxc-start -n " + instance + " -d")
   sys.exit(0)

def stopContainer(instance):
   if not instance:
      print "No instance name given"
      sys.exit(2)

   instanceInfo = checkInstance(instance)
   if not checkInstance:
      print "No such instance found"
      sys.exit(2)
   os.system("lxc-stop -n " + instance)
   umountCMD = "umount " + lxcROOT + instance
   os.system(umountCMD)
   os.system("rm -rf " + lxcROOT + instance)
   
def startContainer(instance):
   if not instance:
      print "No instance name given"
      sys.exit(2)

   image = checkPaaSInstance(instance)
   if not image:
      sys.exit(2)
   os.system("mkdir " + lxcROOT + instance)
   mountContainer(image, instance)
   os.system("lxc-start -n " + instance + " -d")
   sys.exit(0)

def checkPaaSInstance(instance):
   instancePath = cloudROOT + "instances/" + instance
   if not os.path.exists(instancePath):
      print "Instance not found"
      return 0
   PaaSconfigPath = instancePath + "/neweraPaaS.config"
   config = ConfigParser.RawConfigParser()
   config.read(PaaSconfigPath)
   image = config.get('InstanceDetails', 'base-image')
   return image
      

def checkInstance(instance):
   instancePath = lxcROOT + instance

   print instancePath
   if not os.path.exists(instancePath):
      print "path not found"
      return

   PaaSconfigPath = instancePath + "/neweraPaaS.config"
   config = ConfigParser.RawConfigParser()
   config.read(PaaSconfigPath)

   print PaaSconfigPath

   image = config.get('InstanceDetails', 'base-image')
   return image

def mountContainer(image, instance):
   imagePath    = cloudROOT + "images/" + image
   instancePath = cloudROOT + "instances/" + instance
   lxcPath      = lxcROOT + instance

   print "imagePath:"    + imagePath
   print "instancePath:" + instancePath
   print "lxcPath:"      + lxcPath

   mountCMD  = "mount -t aufs -o br=" + instancePath + ":" + imagePath + " ro " + lxcPath
   os.system(mountCMD)

def checkImage(image):
   imagePath = "/var/lib/neweraPaaS/images/" + image
   if os.path.isdir(cloudROOT + "images/" + image):
      return 1
   else:
      return 0
   sys.exit(2)

def createInstanceData():
   path = "/var/lib/neweraPaaS/instances/"
   i    = 1;  
 
   while 1:

      i += 1
      instancePath = path + "instance-" + str(i)

      try:
         status = os.mkdir(instancePath)
      except OSError as exception:
         if exception.errno != errno.EEXIST:
            print "Permission denied"
            raise
      else:
         lxcPath      = lxcROOT + "instance-" + str(i)
         lxcRootPath  = lxcPath + "/rootfs"
         lxcFstabPath = lxcPath + "/fstab"

         os.mkdir(lxcPath)
         print "creating " + lxcPath
         
         return "instance-" + str(i)

def randomMAC():
   mac = [ 0x00, 0x16, 0x3e,
           random.randint(0x00, 0x7f),
	   random.randint(0x00, 0xff),
	   random.randint(0x00, 0xff) ]
   return ':'.join(map(lambda x: "%02x" % x, mac))

if __name__ == "__main__":
   main(sys.argv[1:])

